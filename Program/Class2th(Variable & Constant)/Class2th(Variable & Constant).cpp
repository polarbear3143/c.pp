#include <stdio.h>

void main()
{
#pragma region 산수 연산자
	// 산술 연산자는 두 개의 피연산자 사이에 산술 연산을 수행하는 연산자.
	// +. - , * , / , % 
	// 1. 변수 = 변수 + 변수 
	// 2. 변수 = 변수 - 리터럴 상수 
	// 3. 변수 = 변수 * 심볼릭 상수 
	// 4. 변수 = 리터럴 상수 / 리터럴 상수
	// 5. 변수 = 심볼릭 상수 % 리터럴 상수
#pragma endregion

#pragma region 비트
	// 데이터를 나타내는 최소의 단위이며, 0 또는 1의 조합으로
	// 논리 계산을 수행하는 단위입니다.
#pragma region 10 진수를 2진수로 변환하는 과정
	// 10진수를 1이 될 때까지 계속 2로 나누어 준 다음
	// 나눈 위치의 나머지 값을 아래에서 위로 순섣대로 정렬합니다.
	// ex) 10 / 2 = 5, 나머지 0 , 5 /2 = 2, 나머지 1, 2 / 2 = 1, 나머지 0, -> 1010(2)
	// 23 / 2 = 11, 나머지 1, 11 / 2 = 5, 나머지 1, 5 / 2 = 2, 나머지 1, 2 / 2 = 1, 나머지 0 -> 10111(2)
#pragma region (2) 진수를 (10) 진수로 변환하는 과정
	// 1 byte에 2진수로 저장된 값을 2의 제곱으로 나타냅니다.
	// 각각의 비트에 1이 있다면 1과 2의 제곱의 위치를 계산한 
	// 다음 각각의 비트를 모두 더하여 10진수로 나타냅니다.
	// 10111 -> 2의	0승 , 2의 1승 , 2의 2승 , 2의 3승  = 1, 2 , 4 , 8 , / 1 ->  1 , 1 -> 2. 1 -> 4 , 0 -> 0 , 1 -> 16 = 23  
#pragma endregion

#pragma endregion
#pragma region 비트 연산자
	// 비트 단위로 논리 연산을 수행하기 위해 사용하는 연산자입니다.
#pragma region AND 연산자
	// 두 개의 피연산자가 모두 1이면 1을
	// AND -> &
	// int x1 = 10 ; // 1010
	// int x2 = 6 ; //  0110 = 0010 -> 2
#pragma endregion 
#pragma region OR 연산자
	// 두 개의 피연산자 중에 하나라도 1이 있다면 1을 반환하는 연산자입니다.
	// int x1 = 8; 1000 / int x2 = 12; 1100 = 1100 -> 12
	// OR -> |
#pragma endregion
#pragma region XOR 연산자
	// 두 개의 피연산자가 서로 같으면 0을 반환하고ㅡ 서로 다르면
	// 1을 반환하는 연산자입니다.
	// int x1 = 6; 0110 / int x2 = 15; 1111 = 1001 -> 9
	// XOR -> ^
#pragma endregion
#pragma region NOT 연산자
	// 하나의 비트를 반전시키는 연산자입니다.
	//int x1 = 13; 0000 1101 -> 1111 0010 //  ->  114 -128 = -14
	// 첫 번째 비트는 부호를 나타내며, 첫 번째 비트에
	// 1이 있다면 값은 음수입니다.
	// NOT -> ~
	//printf("%d\n", x1 & x2);
#pragma endregion


#pragma endregion

}